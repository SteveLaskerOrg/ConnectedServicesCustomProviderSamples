<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ConnectedServices</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.AuthenticationChangedEventArgs">
            <summary>
            An EventArgs class used when the authenticated state changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.AuthenticationChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationChangedEventArgs class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.EnableNavigationEventArgs">
            <summary>
            An EventArgs class that contains the navigation state of the current wizard page.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.EnableNavigationEventArgs.#ctor">
            <summary>
            Initializes a new instance of the EnableNavigationEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.EnableNavigationEventArgs.State">
            <summary>
            Gets or sets the navigation button state of the wizard.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator">
            <summary>
            A service that an IConnectedServiceProvider can provide in order to allow the user to authenticate to the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is already logged in or
            otherwise authenticated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.NeedToAuthenticateText">
            <summary>
            Gets a value to display when no instances are available because
            <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated"/> is 'false'.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceConfigurer">
            <summary>
            An IConnectedServiceConfigurer displays a button to allow the user to configure the service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceConfigurer.ConfigureService(System.Threading.CancellationToken)">
            <summary>
            Configure a service either through a dialog or linking
            to the configure web page.
            </summary>
            <param name="ct">
            CancellationToken used to cancel the configuration operation.
            </param>
            <returns>
            Returns a Task for the configuration.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to be called from the UI thread.
            </para>
            <para>
            If an implementation desires to present blocking/modal UI, it may
            do so.  If the service is configured synchronously before
            the method returns, the returned Task should be marked as
            completed (for example, via Task.FromResult()).
            </para>
            <para>
            If the implementation runs in the background, it may return an
            in-progress Task, and the Connected Services code will refresh the
            UI once the Task completes.  In this case, the Connected Services
            code may cancel the task via the CancellationToken if the user
            closes the Conencted Services UI before the service has been configured.
            </para>
            <para>
            If the implementation shows/handles any errors, the Task should
            not fault on them, nor throw them as Exceptions.  If the returned
            Task completes in a Faulted state (such that the Exception member
            is non-null) the Connected Services UI will inform the user of
            the failure.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceConfigurer.CanConfigureService">
            <summary>
            Gets a value indicating whether this service can be
            configured through the service provider.
            </summary>
            <remarks>
            <para>
            Not all service providers will allow configuration (or not without authentication, etc.)
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceConfigurer.ConfigureServiceText">
            <summary>
            Gets a value to use as the text of the control for the users to
            configure the service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceCustomAuthenticator">
            <summary>
            An IConnectedServiceAuthenticator that uses custom UI to authenticate.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceCustomAuthenticator.AuthenticationChanged">
            <summary>
             An event that signals a change to the current authentication state such as the
             authenticated user has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceCustomAuthenticator.View">
            <summary>
            Gets the Framework Element that should be displayed to allow the user to authenticate to the service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceHyperlinkAuthenticator">
            <summary>
            An IConnectedServiceAuthenticator that displays a hyperlink to allow the user to log in and out.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceHyperlinkAuthenticator.ChangeAuthentication(System.Threading.CancellationToken)">
            <summary>
            The action to take when the user chooses to switch users or import
            credentials.
            </summary>
            <param name="ct">
            CancellationToken used to cancel the authentication operation.
            </param>
            <returns>
            Returns a Task that represents changing the authentication.  The
            Task's result value indicates whether any change was made; this
            should be 'true' any time <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated"/> changes,
            and should also be 'true' if some aspect of the authentication
            has changed.  (For example, if additional credentials are
            imported.)
            </returns>
            <remarks>
            <para>
            This method is guaranteed to be called from the UI thread.
            </para>
            <para>
            If an implementation desires to present blocking/modal UI, it may
            do so.  If the authentication is changed before the method
            returns, the returned Task should be marked as completed (likely
            via Task.FromResult()).
            </para>
            <para>
            If the implementation runs in the background, it may return an
            in-progress Task, and the Connected Services code will refresh the
            UI once the Task completes.  In this case, the Connected Services
            code may cancel the task via the CancellationToken if the user
            closes the Conencted Services UI before the instance has been
            created.
            </para>
            <para>
            If the implementation does not or cannot monitor the
            authentication, it may return null.  In this case, the Connected
            Services code will do nothing until and unless a change
            notification is sent for the IsAuthenticated property.
            </para>
            <para>
            If the implementation shows/handles any errors, the Task should
            not fault on them, nor throw them as Exceptions.  If the returned
            Task completes in a Faulted state (such that the Exception member
            is non-null) the Connected Services UI will inform the user of
            the failure.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceHyperlinkAuthenticator.AuthenticatedText">
            <summary>
            Gets the text to display when a user is logged in.
            </summary>
            <remarks>
            <para>
            Should be null for non-user-based authentication schemes.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceHyperlinkAuthenticator.ChangeAuthenticationText">
            <summary>
            Gets the text to display to the user as a hint to change user or
            import credentials.
            </summary>
            <remarks>
            <para>
            Typically "Import credentials..." for credentials based services,
            "Change user" or "Log off" for user-based services.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceConfigurer">
            <summary>
            An IConnectedServiceInstanceConfigurer displays a button to allow the user to configure a service instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceConfigurer.ConfigureServiceInstance(Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance,System.Threading.CancellationToken)">
            <summary>
            Configure a service instance either through a dialog or linking
            to the configure web page.
            </summary>
            <param name="instance">
            The service instance to configure.
            </param>
            <param name="ct">
            CancellationToken used to cancel the configuration operation.
            </param>
            <returns>
            Returns a Task for the configuration.  The Task's result value
            indicates whether any changes were made to the instance.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to be called from the UI thread, and
            only on providers that return 'true' from
            <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated"/>
            if IConnectedServiceAuthenticator is implemented.
            </para>
            <para>
            If an implementation desires to present blocking/modal UI, it may
            do so.  If the service instance is configured synchronously before
            the method returns, the returned Task should be marked as
            completed (for example, via Task.FromResult()).
            </para>
            <para>
            If the implementation runs in the background, it may return an
            in-progress Task, and the Connected Services code will refresh the
            UI once the Task completes.  In this case, the Connected Services
            code may cancel the task via the CancellationToken if the user
            closes the Conencted Services UI before the instance has been
            created.
            </para>
            <para>
            If the implementation does not or cannot monitor the configuration
            of the instance, it may return null.  In this case, the Connected
            Services code will do nothing, and requires the user to manually
            refresh/enumerate the service instances to check for changes to
            the configured instance.
            </para>
            <para>
            If the implementation shows/handles any errors, the Task should
            not fault on them, nor throw them as Exceptions.  If the returned
            Task completes in a Faulted state (such that the Exception member
            is non-null) the Connected Services UI will inform the user of
            the failure.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceConfigurer.CanConfigureServiceInstance">
            <summary>
            Gets a value indicating whether instances of this service can be
            configured through the service provider.
            </summary>
            <remarks>
            <para>
            Not all service providers will allow configuration of instances
            (or not without authentication, etc.)
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceConfigurer.ConfigureServiceInstanceText">
            <summary>
            Gets a value to use as the text of the control for the users to
            configure an instance.
            </summary>
            <remarks>
            <para>
            Not all service providers will allow configuration.  Providers
            may return null if configuration is not supported.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceContext">
            <summary>
            The context information given to IConnectedServiceInstanceHandler instances during AddServiceInstanceAsync.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceContext.ProjectHierarchy">
            <summary>
            Gets the current project context where the service should be added.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceContext.ServiceInstance">
            <summary>
            Gets the instance of the service to add to the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceContext.Logger">
            <summary>
            Gets a logger that can be used to write any messages to the caller. This will include
            warnings of steps that did not succeed but can be fixed by the end user or errors
            that caused the operation to fail.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceCreator">
            <summary>
            An IConnectedServiceInstanceCreator displays a button to allow the user to create a new service instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceCreator.CreateServiceInstance(System.Threading.CancellationToken)">
            <summary>
            Create a new instance of the service.
            </summary>
            <param name="ct">
            CancellationToken used to cancel the creation operation.
            </param>
            <returns>
            Returns a Task that provides the new service instance.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to be called from the UI thread, and
            only on providers that return 'true' from
            <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated"/> 
            if IConnectedServiceAuthenticator is implemented.
            </para>
            <para>
            If an implementation desires to present blocking/modal UI, it may
            do so.  If the service instance is created synchronously before
            the method returns, the returned Task should be marked as
            completed (likely via Task.FromResult()).
            </para>
            <para>
            If the implementation runs in the background, it may return an
            in-progress Task, and the Connected Services code will refresh the
            UI once the Task completes.  In this case, the Connected Services
            code may cancel the task via the CancellationToken if the user
            closes the Conencted Services UI before the instance has been
            created.
            </para>
            <para>
            If the implementation does not or cannot monitor the creation of
            the new instance, it may return null.  In this case, the Connected
            Services code will do nothing, and requires the user to manually
            refresh/enumerate the service instances to check for the newly-
            created instance.
            </para>
            <para>
            If the implementation shows/handles any errors, the Task should
            not fault on them, nor throw them as Exceptions.  If the returned
            Task completes in a Faulted state (such that the Exception member
            is non-null) the Connected Services UI will inform the user of
            the failure.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceCreator.CanCreateServiceInstance">
            <summary>
            Gets a value indicating whether the provider can currently create
            a service instance.
            </summary>
            <remarks>
            Not all service providers will allow creation (or not without
            authentication, etc.)
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceCreator.CreateServiceInstanceText">
            <summary>
            Gets a value to use as the text of the control for the users to
            create a new instance.
            </summary>
            <remarks>
            <para>
            Not all service providers will allow creation (or not without
            authentication, etc.)  Providers may return null if creation
            is not supported at all.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceHandler">
            <summary>
            The interface implemented by service consumers in order to actually add
            a service instance reference to the project, including adding files, SDKs,
            and snippets.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceHandler.AddServiceInstanceAsync(Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstanceContext,System.Threading.CancellationToken)">
            <summary>
            Given a connected service instance, add the necessary files and SDKs to the project in order
            to enable the given service.
            </summary>
            <param name="context">
            The service instance that should be added to the project, including the project that it should be added to.
            </param>
            <param name="ct">
            Cancellation Token to track cancellation.
            </param>
            <returns>
            Returns a Task that can be waited on to be notified when the service instances has been added to the project
            or if anything went wrong.
            </returns>
            <remarks>
            The logger will write any status messages to the caller. This will include
            warnings and failures that occurred while trying to add a new file, SDK references,
            or injecting code.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceLinkProvider">
            <summary>
            A service that can be implemented by an IConnectedServiceProvider to provide hyperlinks that are shown
            in the Connected Services dialogs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceLinkProvider.GetSupportedTechnologyLinks">
            <summary>
            Gets a list of display texts and Uris to display on the right side of the Connected Services
            "Selection" dialog under "Supported technologies".
            </summary>
            <returns>
            An IEnumerable of Tuple instances.  The string is the text that gets displayed in the UI and
            the Uri is the location that is opened when the hyperlink is executed.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceMetadata">
            <summary>
            Metadata for finding, filtering, and describing ConnectedServices Providers and Handlers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceMetadata.ProviderId">
            <summary>
            Gets the unique Provider ID for the provider/handler.  This is used to match
            a provider with its handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceMetadata.AppliesTo">
            <summary>
            Gets the "AppliesTo" string for matching a connected service handler to a project's
            capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider">
            <summary>
            A MEF interface that is exported by extensions who wish to add new entries into the 
            Add Connected Service dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.CreateService(System.Type,System.IServiceProvider)">
            <summary>
            Creates the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to create.
            </param>
            <param name="serviceProvider">
            An IServiceProvider for retrieving service objects.
            </param>
            <returns>
            A Task that returns a service object of type serviceType.-or- null if there is no service object
            of type serviceType.
            </returns>
            <remarks>
            The Connected Services core caches the service objects returned from this method
            for the lifetime of the Connected Service dialog.  When the dialog is dismissed,
            any service object that implements IDisposable will get Dispose() invoked on it.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.Name">
            <summary>
            Gets the human readable display name of this IConnectedServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.Category">
            <summary>
            Gets the category under which this IConnectedServiceProvider should be listed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.Description">
            <summary>
            Gets more information about this IConnectedServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.Icon">
            <summary>
            Gets the icon that should be shown when displaying this IConnectedServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.CreatedBy">
            <summary>
            Gets the name of the organization or person that created this IConnectedServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.Version">
            <summary>
            Gets the version number of this IConnectedServiceProvider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProvider.MoreInfoUri">
            <summary>
            Gets a link to MSDN, Azure Portal, sign-up page, etc. if the name
            and description are not enough for the user to understand.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI">
            <summary>
            A ConnectedServiceProvider service that shows a grid of instances, where a single instance can be chosen to add to the current project.
            </summary>
            <remarks>
            For any string property you can return null to use the default text.  In order to not display text, return string.Empty.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderUI">
            <summary>
            A ConnectedServiceProvider service that is capable of displaying UI.
            </summary>
            <remarks>
            This is the type passed into IConnectedServiceProvider.CreateService in order to determine
            which UI template is being used.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.EnumerateServiceInstancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of all of the service instances for the currently
            authenticated user, if any.
            </summary>
            <param name="ct">
            CancellationToken used to cancel the enumeration operation.
            </param>
            <returns>
            Returns a Task that provides the available service instances.
            </returns>
            <remarks>
            <para>
            This method is guaranteed to <em>not</em> be called from the UI
            thread.  It will only be called on providers that return 'true'
            from <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceAuthenticator.IsAuthenticated"/>
            if IConnectedServiceAuthenticator is implemented.
            </para>
            <para>
            The implementation's Task should complete only once the service
            instance Enumerable is fully available.  The Connected Services
            code will refresh the UI once the returned Task completes, and
            the enumeration should not block on any network calls.
            </para>
            <para>
            Because this is not called on the UI thread, the implementation
            should <em>not</em> show any errors.  If need be, the Task should
            complete in a Faulted state (such that the Exception member
            is non-null) and the Connected Services UI will inform the user of
            the failure.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.ShortDescription">
            <summary>
            Gets a value to display under the title of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.GridHeaderText">
            <summary>
            Gets a value to display directly above the grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.EnumeratingServiceInstancesText">
            <summary>
            Gets a value to display while Connected Services is attempting to
            retrieve the service instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.NoServiceInstancesText">
            <summary>
            Gets a value to display when no instances are available because
            the enumeration returned no instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.ServiceInstanceNameLabelText">
            <summary>
            Gets a value to display as the column header or label for the
            service instance name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.ColumnMetadata">
            <summary>
            Gets the keys and display strings for metadata to show as columns
            in the service instance list.
            </summary>
            <remarks>
            <para>
            The Item1 field in the enumerable's Tuple is used as a key into
            the <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.Metadata"/> dictionary.
            The Item2 field is a localized display string to use as the column
            header.
            </para>
            <para>
            The columns will be added in the order given after the column that
            shows the service instance's name.  To change the display text for
            the service instance name, use the
            <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.ServiceInstanceNameLabelText"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.DetailMetadata">
            <summary>
            Gets the keys and display strings for metadata to show in the
            property pane (to the right) when an instance is selected from the
            service instance list.
            </summary>
            <remarks>
            <para>
            The Item1 field in the enumerable's Tuple is used as a key into
            the <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.Metadata"/> dictionary.
            The Item2 field is a localized display string to use as the field
            label.
            </para>
            <para>
            The labels and fields will be displayed in the order given after
            the label and value for the service instance's name.  To change
            the display text for the service instance name, use the
            <see cref="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderGridUI.ServiceInstanceNameLabelText"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderHost">
            <summary>
            The host object for a Connected Service Provider.  It provides services to provider extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderHost.StartBusyIndicator(System.String)">
            <summary>
            Shows a busy indicator and message to the user to indicate that Visual Studio is actively working
            on processing the current request.
            </summary>
            <param name="message">
            An optional message to show to the user.
            </param>
            <returns>
            An IDisposable object that will stop the busy indicator when it is disposed.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderHost.ProjectHierarchy">
            <summary>
            Gets the project's IVsHierarchy that the current Connected Service dialog is operating on.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderWizardUI">
            <summary>
            A ConnectedServiceProvider service that is capable of displaying multiple pages before the service is added to the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderWizardUI.GetFinishedServiceInstance">
            <summary>
            The method that is invoked when the user clicks the Finish button.
            This method will return a “finished” service instance that will be passed off to the Handler.
            </summary>
            <returns>
            A Task that returns the completed IConnectedServiceInstance.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderWizardUI.Pages">
            <summary>
            The collection of pages in the wizard.  Each page is a “step” in the wizard.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceProviderWizardUI.EnableNavigation">
            <summary>
            Event for enabling the navigation buttons (Previous, Next, or Finish)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServicesManager">
            <summary>
            An interface implemented by the Connected Services wrapper around the
            Reference Manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServicesManager.ShowConnectedServicesManager(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Shows the Connected Services Manager as a modal popup, and returns any
            added service instances.
            </summary>
            <param name="project">The project to which to add services.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServicesManager.ShowProviderConfigurationDialog(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Show the configuration dialog for the provider.
            </summary>
            <param name="providerId">The string identifier of the IConnectedServiceProvider.</param>
            <param name="project">The project to which to show the dialog for.</param>
            <returns>A Task that will signal when this action is complete.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance">
            <summary>
            A specific instance of a given service provided by the connected service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.Name">
            <summary>
            Gets the human readable display name of the service instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.InstanceId">
            <summary>
            Gets a unique ID for the service instance.
            </summary>
            <remarks>
            Consumers only need the instance ID, and not access to the provider directly.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.ProviderId">
            <summary>
            Gets the ID of the parent connected service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceInstance.Metadata">
            <summary>
            Gets metadata for the service instance used by the service provider and the service consumer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory">
            <summary>
            The severity level of a message logged by ILogger.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory.Information">
            <summary>
            The message can be shown to the user and is just for information, such as progress
            information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory.Debug">
            <summary>
            The message is only to be used to help debug the application.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory.Warning">
            <summary>
            Something non-critical went wrong or the user should be aware of a possible
            snag, but the operation can continue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory.Error">
            <summary>
            Something went wrong and the operation can not continue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory.Status">
            <summary>
            This is the current status of a long running operation. This is intended to let the user
            know the what operation is currently processing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.ILogger">
            <summary>
            A logging service which can be used to provide information to end user developers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.ILogger.WriteMessage(Microsoft.VisualStudio.ConnectedServices.LoggerMessageCategory,System.String,System.Object[])">
            <summary>
            Write a message to the log.
            </summary>
            <param name="category">
            The severity level of the message.
            </param>
            <param name="format">
            A composite format string
            </param>
            <param name="args">
            An object array that contains zero or more objects to format.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage">
            <summary>
            Interface for a Wizard Page.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.OnPageEntering">
            <summary>
            OnPageEntering is called on a IConnectedServiceWizardPage when the wizard is navigating to the page.
            </summary>
            <returns>
            A NavigationEnabledState object that describes which navigation buttons should be enabled/disabled.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.OnPageLeaving">
            <summary>
            OnPageLeaving is called on a IConnectedServiceWizardPage when the wizard is navigating away from the page.
            </summary>
            <returns>
            A WizardNavigationResult that describes the success/failure state of the navigation.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.Title">
            <summary>
            Gets the title of the page that is shown at the top of the wizard when the page is active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.Description">
            <summary>
            Gets the description of the page that is shown at the top of the wizard when the page is active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.Legend">
            <summary>
            Gets the name of the page shown on the left-hand side of the wizard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.IsEnabled">
            <summary>
            Gets a value indicating whether this page is enabled, and can be navigated to using the left-hand size page picker.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.IsSelected">
            <summary>
            Gets or sets a value indicating whether this page is the currently shown page in the wizard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.HasErrors">
            <summary>
            Gets a value indicating whether this page has errors that the user needs to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.IConnectedServiceWizardPage.View">
            <summary>
            Gets the WPF UI Element that describes the content of the page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.NavigationEnabledState">
            <summary>
            A class that contains the navigation state for the Previous, Next, and Finish buttons of the wizard.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.NavigationEnabledState.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the NavigationEnabledState class.
            </summary>
            <param name="isPreviousEnabled">
            A value indicating whether or not the Previous action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </param>
            <param name="isNextEnabled">
            A value indicating whether or not the Next action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </param>
            <param name="isFinishEnabled">
            A value indicating whether or not the Finish action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.NavigationEnabledState.IsPreviousEnabled">
            <summary>
            Gets or sets a value indicating whether or not the Previous action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.NavigationEnabledState.IsNextEnabled">
            <summary>
            Gets or sets a value indicating whether or not the Next action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.NavigationEnabledState.IsFinishEnabled">
            <summary>
            Gets or sets a value indicating whether or not the Finish action should be enabled.
            A null value is used when the state shouldn't change from its current state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult">
            <summary>
            Contains the result state after leaving a page in the wizard.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult.#ctor">
            <summary>
            Initializes a new instance of the WizardNavigationResult class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult.Success">
            <summary>
            A successful WizardNavigationResult which allows the user to navigate away from the current page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the navigation can succeed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult.ShowMessageBoxOnFailure">
            <summary>
            Gets or sets a value indicating whether the ErrorMessage should be shown to the user in a message box or not displayed at all.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ConnectedServices.WizardNavigationResult.ErrorMessage">
            <summary>
            Gets or sets the message that should be shown in a message box to the user.
            </summary>
        </member>
    </members>
</doc>
